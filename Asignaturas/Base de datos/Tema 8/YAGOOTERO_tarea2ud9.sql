USE EMPRESANEW;

-- 1.
--SELECT * FROM DEPARTAMENTO

ALTER TABLE DEPARTAMENTO 
	ADD FECHADIRECCION DATE NULL
	CONSTRAINT CK_FECHADIRECCION CHECK (FECHADIRECCION<= GETDATE())
	
GO
IF OBJECT_ID('fnAnhosFechas') IS NOT NULL
	DROP FUNCTION fnAnhosFechas 

GO
CREATE FUNCTION fnAnhosFechas (@FECHA1 DATE, @FECHA2 DATE)
	RETURNS INT
AS 
BEGIN 
	RETURN DATEDIFF(yyyy, @FECHA1, @FECHA2) 
END 
GO
	

IF OBJECT_ID('prActualizarDirector') IS NOT NULL
	DROP PROCEDURE prActualizarDirector 
	
GO
CREATE PROCEDURE prActualizarDirector
	(
	@N_DEPART VARCHAR(100), @DIRECTOR CHAR(9) = NULL,
		@FECHA_DIRECC DATE = NULL, @ANHOS_DIRECTOR INT OUTPUT,
		@MENSAJE VARCHAR(300)
	)
AS 
BEGIN
	SET NOCOUNT ON
	DECLARE @NUMDEPARTAMENTO_DIC INT 
	SELECT @NUMDEPARTAMENTO_DIC = NUMDEPARTAMENTO
	FROM DEPARTAMENTO D 
	WHERE D.NomeDepartamento = @N_DEPART
	
	IF NOT EXISTS (SELECT * FROM DEPARTAMENTO
					WHERE NomeDepartamento = @N_DEPART)
					
	
	IF @FECHA_DIRECC > GETDATE()
		SELECT @FECHA_DIRECC = GETDATE()
	
	IF(
		(SELECT NumDepartamentoPertenece FROM EMPREGADO  E 
		INNER JOIN EMPREGADOFIXO EF ON E.NSS = EF.NSS
		WHERE E.NSS = @DIRECTOR) = @NUMDEPARTAMENTO_DIC
	)
	BEGIN

		IF(@DIRECTOR IS NULL AND @FECHA_DIRECC IS NULL)
		BEGIN
			UPDATE DEPARTAMENTO
			SET FECHADIRECCION = DATEDIFF(MM, -2,GETDATE())
			WHERE NOMEDEPARTAMENTO = @N_DEPART
			
		END
		
		ELSE
		
		BEGIN
			UPDATE DEPARTAMENTO 
			SET FECHADIRECCION = @FECHA_DIRECC
			WHERE NOMEDEPARTAMENTO = @N_DEPART
		END
		
	SELECT @ANHOS_DIRECTOR = DBO.fnAnhosFechas(@FECHA_DIRECC,GETDATE())
	
	DECLARE @NOME_DIRECTOR VARCHAR(100)
	SELECT @NOME_DIRECTOR = 
		NOME + ' ' + APELIDO1 FROM EMPREGADO WHERE NSS = @DIRECTOR
	SELECT @MENSAJE = 'SE ACTUALIZO A ' + @NOME_DIRECTOR + ' QUE LLEVA DESDE ' + @FECHA_DIRECC 
	
END

SELECT * FROM EMPREGADOFIXO
SELECT * FROM DEPARTAMENTO
EXEC prActualizarDirector 'CONTABILIDAD', '0001112', '11-02-2003'


GO
CREATE PROCEDURE prActualizarDirector2
	(
	@N_DEPART VARCHAR(100), @DIRECTOR CHAR(9) = NULL,
		@FECHA_DIRECC DATE = NULL, @ANHOS_DIRECTOR INT OUTPUT,
		@MENSAJE VARCHAR(300)
	)
AS 
BEGIN
	DECLARE @DIRECTORATIGUO CHAR(9)
	SET @DIRECTORATIGUO=
	(SELECT NSSDIRECTOR FROM DEPARTAMENTO WHERE NomeDepartamento = @N_DEPART)
	
	IF @DIRECTOR IS NULL OR @DIRECTOR = @DIRECTORATIGUO
	BEGIN 
		SET @DIRECTOR = @DIRECTORATIGUO
		SET @MENSAJE = 'NO SE HA CAMBIADO EL DIRECTOR'
	END
	ELSE
	BEGIN 
		SET @MENSAJE = 'SE CAMBIO EL DIC'
	END
	
	
	IF @FECHA_DIRECC IS NULL
		SET @FECHA_DIRECC = (SELECT DATEADD(MM,-2,GETDATE()))
	ELSE
		IF @FECHA_DIRECC > GETDATE()
			SET @FECHA_DIRECC = GETDATE()
		SET @MENSAJE = 'SE CAMBIO DE FECHA'
		
		UPDATE DEPARTAMENTO 
		SET NSSDirector = @DIRECTOR, FECHADIRECCION= @FECHA_DIRECC
		WHERE NomeDepartamento = @N_DEPART
		SELECT @ANHOS_DIRECTOR = DBO.fnAnhosFechas(@FECHA_DIRECC, GETDATE())
END

GO
IF OBJECT_ID('PRaCTUALIZACIONfECHAdIRECCIONDEPARTMENTO') IS NOT NULL
	DROP FUNCTION PRaCTUALIZACIONfECHAdIRECCIONDEPARTMENTO
	
GO	
CREATE PROCEDURE PRaCTUALIZACIONfECHAdIRECCIONDEPARTMENTO
	(@FECHADADA DATE)
AS
SET NOCOUNT ON
BEGIN 
	
	DECLARE CURSOR2 CURSOR 
	LOCAL FORWARD_ONLY DYNAMIC FOR
	SELECT NOMEDEPARTAMENTO FROM DEPARTAMENTO
	
	DECLARE @NOME VARCHAR(100)
	DECLARE @MENSAJE VARCHAR(100)
	DECLARE @ANHOS TINYINT
	
	OPEN CURSOR2 
	FETCH NEXT CURSOR2 INTO @NOME
	WHILE (@@FETCH_STATUS <> -1 )
		BEGIN 
		IF
			(@@FETCH_STATUS = -2)
			BEGIN 
				FETCH NEXT FROM CURSOR2 INTO @NOME
		END
		
		EXEC prActualizarDirector2
		@NOME, NULL, @FECHA, @ANHOS OUTPUT, @MENSAJE OUTPUT
		SET @FECHADADA=DATEADD(DD,45,@FECHADADA)
		FETCH NEXT FROM CURSOR2 INTO @NOME
	
	
END
CLOSE CURSOR2
DEALLOCATE  CURSOR2 
END



GO
--EJERCICIO 2 
IF OBJECT_ID('FNEMPREGADOPROYECTOS') IS NOT NULL
	DROP FUNCTION FNEMPREGADOPROYECTOS


GO
	
CREATE FUNCTION FNEMPREGADOPROYECTOS()
RETURNS @EMPREGADOPROYECTO TABLE (
	NOME VARCHAR(100),
	PROYECTOS VARCHAR(100)
)
AS
BEGIN
	DECLARE EMPREGADOCURSOR CURSOR STATIC FOR
	SELECT NSS,NOME + APELIDO1 
	FROM EMPREGADO
	
	DECLARE @NOMBRE VARCHAR(100)
	DECLARE @NSS VARCHAR(15)
	
	-- APERTURA DEL CURSOR Y LLENA EL CONJUNTO DE RESULTADOS
	OPEN EMPREGADOCURSOR 
	FETCH NEXT FROM EMPREGADOCURSOR INTO @NSS,@NOME
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	
		DECLARE @PROYECTOS VARCHAR(250)
		SET @PROYECTOS = ''
		
		DECLARE PROYECTOCURSOR CURSOR STATIC FOR
			SELECT NOMEPROXECTO , HORAS
			FROM EMPREGADO_PROXECTO EP 
			INNER JOIN PROXECTO P ON  EP.NUMPROXECTO = P.NUMPROXECTO
			WHERE EP.NSSEMPREGADO = @NSS
			
			OPEN PROYECTOCURSOR 
			FETCH NEXT FROM PROYECTOCURSOR INTO @NOMBREPROYECTO , @HORAS
			IF @@CURSOR_ROWS = 0 SET @PROYECTOS = 'SIN PROYECTOS'
			WHILE @@FETCH_STATUS = 0
				BEGIN
					SET @PROYECTOS = @PROYECTOS + ' ' + @NOMBREPROYECTO
					
					FETCH NEXT FROM PROYECTOCURSOR INTO @NOMBREPROYECTO, @HORAS
				END
				
			INSERT INTO @EMPREGADOPROYECTO
			VALUES (@NOMBRE, @PROYECTOS)
			
			CLOSE PROYECTOCURSOR
			DEALLOCATE PROYECTOCURSOR
			
			FETCH NEXT FROM EMPREGADOCURSOR INTO @NSS, @NOMBRE
	
	END

END
	